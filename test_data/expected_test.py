import pytest

import dill

from math import sin, pi
import pandas as pd
import numpy as np

@pytest.fixture
def generated_f():
    return dill.loads(
        b'\x80\x04\x95\x8d\x06\x00\x00\x00\x00\x00\x00\x8c\x12pandas.core.series\x94\x8c\x06Series\x94\x93\x94)\x81\x94}\x94(\x8c\x04_mgr\x94\x8c\x1epandas.core.internals.managers\x94\x8c\x12SingleBlockManager\x94\x93\x94)\x81\x94(]\x94\x8c\x18pandas.core.indexes.base\x94\x8c\n_new_Index\x94\x93\x94\x8c\x19pandas.core.indexes.range\x94\x8c\nRangeIndex\x94\x93\x94}\x94(\x8c\x04name\x94N\x8c\x05start\x94K\x00\x8c\x04stop\x94K\x81\x8c\x04step\x94K\x01u\x86\x94R\x94a]\x94\x8c\ndill._dill\x94\x8c\r_create_array\x94\x93\x94(\x8c\x16numpy._core.multiarray\x94\x8c\x0c_reconstruct\x94\x93\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94(K\x01K\x81\x85\x94h\x1f\x8c\x05dtype\x94\x93\x94\x8c\x02f8\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01<\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89B\x08\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x83\xc0\xca\xa1\xa5\xb4\xb9@\x91\xed|?\xb5\xd5\x97@\x7fj\xbct\x93\x95\x87@\xecQ\xb8\x1e\x05\xdf\x99@P\x8d\x97n\x12#>@;\xdfO\x8d\x97\'\x90@X9\xb4\xc8v\xbey@33333\x97g@\xc9v\xbe\x9f\x1a\x96\x8d@\x19\x04V\x0e-\xd20@\xf6(\\\x8f\xc2\x15x@\x8f\xc2\xf5(\\\xb9\x80@\x85\xebQ\xb8\x1e\xb5a@9\xb4\xc8v\xbe\xa9y@\x93\x18\x04V\x0e\x9dn@\xcd\xcc\xcc\xcc\xcc<m@\x00\x00\x00\x00\x00pF@)\\\x8f\xc2\xf5\xa0m@^\xbaI\x0c\x02:\x80@#\xdb\xf9~j\\>\xc0\xf6(\\\x8f\xc2\xa7t@J\x0c\x02+\x87\xe1\x8a@B`\xe5\xd0"\x9fs@\x9c\xc4 \xb0rha\xc0\xb6\xf3\xfd\xd4x\xddd@B`\xe5\xd0"Sf@\xcd\xcc\xcc\xcc\xcc|t\xc0\xd1"\xdb\xf9~\xb2m@u\x93\x18\x04VBw@X9\xb4\xc8vbe\xc0\xb6\xf3\xfd\xd4x\x8d}@)\\\x8f\xc2\xf5zq@Zd;\xdfO\x99i\xc0)\\\x8f\xc2\xf5\xe2q@d;\xdfO\x8d\xdfb@j\xbct\x93\x18$G@\x14\xaeG\xe1zDF\xc0Nb\x10X9\xa0e\xc0\x96C\x8bl\xe7\xb3T@\xfa~j\xbct;d\xc0\xe5\xd0"\xdb\xf9\xb6a\xc0\x1f\x85\xebQ\xb8\x9e\\@\xc1\xca\xa1E\xb6\xdbV@\xdb\xf9~j\xbc\xa4m@\x17\xd9\xce\xf7S\x0bb@\x96C\x8bl\xe7;M@\xecQ\xb8\x1e\x85cX@!\xb0rh\x91qc@\\\x8f\xc2\xf5((i@\xb2\x9d\xef\xa7\xc6KB@q=\n\xd7\xa3pJ@\xc7K7\x89A\xecq\xc0j\xbct\x93\x18F}\xc0;\xdfO\x8d\x97jj@R\xb8\x1e\x85\xeb-r@fffff\xe6)@\n\xd7\xa3p=rR@o\x12\x83\xc0\xca\xa1\x14@!\xb0rh\x91\xad+@\xb4\xc8v\xbe\x9f6e@\xc3\xf5(\\\x8f\xe4u@\xfa~j\xbct1q@\xecQ\xb8\x1e\x85K?\xc0\x00\x00\x00\x00\x00`c\xc0\x7fj\xbct\x93\x16p@}?5^\xba\xf9\x87@\x93\x18\x04V\x0e\xd5^@\x17\xd9\xce\xf7S\xf5z\xc0\xaa\xf1\xd2Mb Y\xc0\x83\xc0\xca\xa1E>k\xc0\'1\x08\xac\x1c\xe2^\xc0R\xb8\x1e\x85\xeb\xd1M\xc0\xfe\xd4x\xe9&mm\xc0\x87\x16\xd9\xce\xf7\x97d@\xc7K7\x89A\x10D\xc0\x91\xed|?5\x04u\xc0\xf2\xd2Mb\x10(j\xc0\xf4\xfd\xd4x\xe9\xa6p\xc0\xcd\xcc\xcc\xcc\xcc\xb4c@\xa0\x1a/\xdd$(r@\xa8\xc6K7\x89\t`@\x04V\x0e-\xb2\x99`@/\xdd$\x06\x81\x11e\xc0{\x14\xaeG\xe12]@Zd;\xdfOow@\xb2\x9d\xef\xa7\xc6\x0b)@\x0e-\xb2\x9d\xef7B\xc0^\xbaI\x0c\x02\xe7e@\xa2E\xb6\xf3\xfdv~@\xc3\xf5(\\\x8f\xcai@\x10X9\xb4\xc8"m\xc0d;\xdfO\x8d\x17\x1b@\xb2\x9d\xef\xa7\xc6\xabf\xc0\x10X9\xb4\xc8\xdcq\xc0\x9e\xef\xa7\xc6K\x8fZ@H\xe1z\x14\xae\xd7A@\xcf\xf7S\xe3\xa5[T@Zd;\xdfO}l@-\xb2\x9d\xef\xa7\xaeP\xc0\\\x8f\xc2\xf5(\xb4j\xc0\xa6\x9b\xc4 \xb0\x82D\xc0\x12\x83\xc0\xca\xa1E\x08@o\x12\x83\xc0\xca\xd1I\xc0\xee|?5^:T\xc0\xd1"\xdb\xf9~\xe2i\xc0\xc3\xf5(\\\x8f\xd2S\xc0o\x12\x83\xc0\xca\x016\xc0\x81\x95C\x8blIw\xc0+\x87\x16\xd9\xce\xedr\xc0\xb2\x9d\xef\xa7\xc6\xfbA@{\x14\xaeG\xe1rt@\xd9\xce\xf7S\xe3\x86\x80@\xc3\xf5(\\\x8f\xc4t@#\xdb\xf9~j\xdcb@\xe7\xfb\xa9\xf1\xd2M\x05\xc0\xb8\x1e\x85\xebQ T@\xe3\xa5\x9b\xc4 \x00t@J\x0c\x02+\x87\xf61@=\n\xd7\xa3p1n\xc0\xfa~j\xbct)s\xc0\xd3Mb\x10X\x89O\xc0\x93\x18\x04V\x0eIj@\xc9v\xbe\x9f\x1a\xabi\xc0\x19\x04V\x0e-r\'@\xfc\xa9\xf1\xd2M\x1as@j\xbct\x93\x18\xf4b\xc0\x8bl\xe7\xfb\xa9\x11D\xc0\x00\x00\x00\x00\x00\x00\x00\x80\x94t\x94Nt\x94R\x94a]\x94h\rh\x10}\x94(h\x12Nh\x13K\x00h\x14K\x81h\x15K\x01u\x86\x94R\x94a}\x94\x8c\x060.14.1\x94}\x94(\x8c\x04axes\x94h\n\x8c\x06blocks\x94]\x94}\x94(\x8c\x06values\x94h0\x8c\x08mgr_locs\x94h\x19\x8c\n_load_type\x94\x93\x94\x8c\x05slice\x94\x85\x94R\x94K\x00K\x81K\x01\x87\x94R\x94uaust\x94b\x8c\x04_typ\x94\x8c\x06series\x94\x8c\t_metadata\x94]\x94\x8c\x05_name\x94a\x8c\x05attrs\x94}\x94\x8c\x06_flags\x94}\x94\x8c\x17allows_duplicate_labels\x94\x88shJ\x8c\x01f\x94ub.')

@pytest.fixture
def generated_x():
    return dill.loads(b"\x80\x04\x95\x8d\x06\x00\x00\x00\x00\x00\x00\x8c\x12pandas.core.series\x94\x8c\x06Series\x94\x93\x94)\x81\x94}\x94(\x8c\x04_mgr\x94\x8c\x1epandas.core.internals.managers\x94\x8c\x12SingleBlockManager\x94\x93\x94)\x81\x94(]\x94\x8c\x18pandas.core.indexes.base\x94\x8c\n_new_Index\x94\x93\x94\x8c\x19pandas.core.indexes.range\x94\x8c\nRangeIndex\x94\x93\x94}\x94(\x8c\x04name\x94N\x8c\x05start\x94K\x00\x8c\x04stop\x94K\x81\x8c\x04step\x94K\x01u\x86\x94R\x94a]\x94\x8c\ndill._dill\x94\x8c\r_create_array\x94\x93\x94(\x8c\x16numpy._core.multiarray\x94\x8c\x0c_reconstruct\x94\x93\x94\x8c\x05numpy\x94\x8c\x07ndarray\x94\x93\x94K\x00\x85\x94C\x01b\x94\x87\x94(K\x01K\x81\x85\x94h\x1f\x8c\x05dtype\x94\x93\x94\x8c\x02f8\x94\x89\x88\x87\x94R\x94(K\x03\x8c\x01<\x94NNNJ\xff\xff\xff\xffJ\xff\xff\xff\xffK\x00t\x94b\x89B\x08\x04\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x18-DT\xfb!\x99?\x18-DT\xfb!\xa9?\xd2!3\x7f|\xd9\xb2?\x18-DT\xfb!\xb9?^8U)zj\xbf?\xd2!3\x7f|\xd9\xc2?u\xa7\xbb\xe9\xbb\xfd\xc5?\x18-DT\xfb!\xc9?\xbb\xb2\xcc\xbe:F\xcc?^8U)zj\xcf?\x00\xdf\xee\xc9\\G\xd1?\xd2!3\x7f|\xd9\xd2?\xa4dw4\x9ck\xd4?u\xa7\xbb\xe9\xbb\xfd\xd5?F\xea\xff\x9e\xdb\x8f\xd7?\x18-DT\xfb!\xd9?\xeao\x88\t\x1b\xb4\xda?\xbb\xb2\xcc\xbe:F\xdc?\x8c\xf5\x10tZ\xd8\xdd?^8U)zj\xdf?\x98\xbdL\xefL~\xe0?\x00\xdf\xee\xc9\\G\xe1?i\x00\x91\xa4l\x10\xe2?\xd2!3\x7f|\xd9\xe2?;C\xd5Y\x8c\xa2\xe3?\xa4dw4\x9ck\xe4?\x0c\x86\x19\x0f\xac4\xe5?u\xa7\xbb\xe9\xbb\xfd\xe5?\xde\xc8]\xc4\xcb\xc6\xe6?F\xea\xff\x9e\xdb\x8f\xe7?\xaf\x0b\xa2y\xebX\xe8?\x18-DT\xfb!\xe9?\x81N\xe6.\x0b\xeb\xe9?\xeao\x88\t\x1b\xb4\xea?R\x91*\xe4*}\xeb?\xbb\xb2\xcc\xbe:F\xec?$\xd4n\x99J\x0f\xed?\x8c\xf5\x10tZ\xd8\xed?\xf5\x16\xb3Nj\xa1\xee?^8U)zj\xef?\xe3\xac\xfb\x01\xc5\x19\xf0?\x98\xbdL\xefL~\xf0?L\xce\x9d\xdc\xd4\xe2\xf0?\x00\xdf\xee\xc9\\G\xf1?\xb5\xef?\xb7\xe4\xab\xf1?i\x00\x91\xa4l\x10\xf2?\x1e\x11\xe2\x91\xf4t\xf2?\xd2!3\x7f|\xd9\xf2?\x862\x84l\x04>\xf3?;C\xd5Y\x8c\xa2\xf3?\xefS&G\x14\x07\xf4?\xa4dw4\x9ck\xf4?Xu\xc8!$\xd0\xf4?\x0c\x86\x19\x0f\xac4\xf5?\xc1\x96j\xfc3\x99\xf5?u\xa7\xbb\xe9\xbb\xfd\xf5?)\xb8\x0c\xd7Cb\xf6?\xde\xc8]\xc4\xcb\xc6\xf6?\x92\xd9\xae\xb1S+\xf7?F\xea\xff\x9e\xdb\x8f\xf7?\xfb\xfaP\x8cc\xf4\xf7?\xaf\x0b\xa2y\xebX\xf8?d\x1c\xf3fs\xbd\xf8?\x18-DT\xfb!\xf9?\xcc=\x95A\x83\x86\xf9?\x81N\xe6.\x0b\xeb\xf9?5_7\x1c\x93O\xfa?\xeao\x88\t\x1b\xb4\xfa?\x9e\x80\xd9\xf6\xa2\x18\xfb?R\x91*\xe4*}\xfb?\x07\xa2{\xd1\xb2\xe1\xfb?\xbb\xb2\xcc\xbe:F\xfc?o\xc3\x1d\xac\xc2\xaa\xfc?$\xd4n\x99J\x0f\xfd?\xd8\xe4\xbf\x86\xd2s\xfd?\x8c\xf5\x10tZ\xd8\xfd?A\x06ba\xe2<\xfe?\xf5\x16\xb3Nj\xa1\xfe?\xaa'\x04<\xf2\x05\xff?^8U)zj\xff?\x12I\xa6\x16\x02\xcf\xff?\xe3\xac\xfb\x01\xc5\x19\x00@>5\xa4\xf8\x08L\x00@\x98\xbdL\xefL~\x00@\xf2E\xf5\xe5\x90\xb0\x00@L\xce\x9d\xdc\xd4\xe2\x00@\xa6VF\xd3\x18\x15\x01@\x00\xdf\xee\xc9\\G\x01@[g\x97\xc0\xa0y\x01@\xb5\xef?\xb7\xe4\xab\x01@\x0fx\xe8\xad(\xde\x01@i\x00\x91\xa4l\x10\x02@\xc3\x889\x9b\xb0B\x02@\x1e\x11\xe2\x91\xf4t\x02@x\x99\x8a\x888\xa7\x02@\xd2!3\x7f|\xd9\x02@,\xaa\xdbu\xc0\x0b\x03@\x862\x84l\x04>\x03@\xe1\xba,cHp\x03@;C\xd5Y\x8c\xa2\x03@\x95\xcb}P\xd0\xd4\x03@\xefS&G\x14\x07\x04@I\xdc\xce=X9\x04@\xa4dw4\x9ck\x04@\xfe\xec\x1f+\xe0\x9d\x04@Xu\xc8!$\xd0\x04@\xb2\xfdp\x18h\x02\x05@\x0c\x86\x19\x0f\xac4\x05@f\x0e\xc2\x05\xf0f\x05@\xc1\x96j\xfc3\x99\x05@\x1b\x1f\x13\xf3w\xcb\x05@u\xa7\xbb\xe9\xbb\xfd\x05@\xcf/d\xe0\xff/\x06@)\xb8\x0c\xd7Cb\x06@\x84@\xb5\xcd\x87\x94\x06@\xde\xc8]\xc4\xcb\xc6\x06@8Q\x06\xbb\x0f\xf9\x06@\x92\xd9\xae\xb1S+\x07@\xecaW\xa8\x97]\x07@F\xea\xff\x9e\xdb\x8f\x07@\xa1r\xa8\x95\x1f\xc2\x07@\xfb\xfaP\x8cc\xf4\x07@U\x83\xf9\x82\xa7&\x08@\xaf\x0b\xa2y\xebX\x08@\t\x94Jp/\x8b\x08@d\x1c\xf3fs\xbd\x08@\xbe\xa4\x9b]\xb7\xef\x08@\x18-DT\xfb!\t@\x94t\x94Nt\x94R\x94a]\x94h\rh\x10}\x94(h\x12Nh\x13K\x00h\x14K\x81h\x15K\x01u\x86\x94R\x94a}\x94\x8c\x060.14.1\x94}\x94(\x8c\x04axes\x94h\n\x8c\x06blocks\x94]\x94}\x94(\x8c\x06values\x94h0\x8c\x08mgr_locs\x94h\x19\x8c\n_load_type\x94\x93\x94\x8c\x05slice\x94\x85\x94R\x94K\x00K\x81K\x01\x87\x94R\x94uaust\x94b\x8c\x04_typ\x94\x8c\x06series\x94\x8c\t_metadata\x94]\x94\x8c\x05_name\x94a\x8c\x05attrs\x94}\x94\x8c\x06_flags\x94}\x94\x8c\x17allows_duplicate_labels\x94\x88shJ\x8c\x01x\x94ub.")

@pytest.fixture
def generated_dx():
    return dill.loads(b'\x80\x04\x95\n\x00\x00\x00\x00\x00\x00\x00G?\x99!\xfbTD-\x18.')

@pytest.fixture
def generated_R():
    return dill.loads(b'\x80\x04K\x01.')

def tr_rule(f: pd.Series, x: pd.Series, dx: float, R: int):
    return (
        (2 / pi) * dx * (
            (1/2 * f.iloc[0] * sin(R * x.iloc[0])) +
            sum(f.iloc[1:-1] * (x.iloc[1:-1] * R).map(sin)) +
            (1/2 * f.iloc[-1] * sin(R * x.iloc[-1]))
        )
    )

def test_tr_rule(generated_f, generated_x, generated_dx, generated_R):
    result = tr_rule(generated_f, generated_x, generated_dx, generated_R)
